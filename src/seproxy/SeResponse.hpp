// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef KEYPLE_SEPROXY_SERESPONSE_H
#define KEYPLE_SEPROXY_SERESPONSE_H

/************************************************************
 SeResponse class header
 ************************************************************/

//#include "keyple/seproxy/Pkg_seproxy.h"

#include <list>
#include <stdint.h>

#include "ApduResponse.hpp"

namespace keyple {

	namespace seproxy {

		/************************************************************/
		/**
		 * Class to aggregate the elements of a response from a local or remote SE Reader
		 */
		class SeResponse {
		public:

			/**
			 * Constructor
			 * @param channelPreviouslyOpen 
			 * @param fci 
			 * @param atr 
			 * @param apduResponses 
			 */
			SeResponse(bool inChannelPreviouslyOpen, ApduResponse* inFci, uint8_t inAtr[257], uint16_t inAtrLength);

			SeResponse();

			/**
			 * Destructor
			 */
			~SeResponse();

			/**
			 * 
			 * @return the previous state of the logical channel.
			 */
			bool wasChannelPreviouslyOpen();

			/**
			 * 
			 * @return null or the FCI response if a channel was opened.
			 */
			ApduResponse* getFci();

			/**
			 * 
			 * @return the group of APDUs responses returned by the SE application for this instance of SeResponse 
			 */
			std::list<ApduResponse>* getApduResponses();

			/**
			 * 
			 * @return atr 
			 */
			uint8_t* getAtr();

			uint16_t getAtrLength();

			void setData(bool inChannelPreviouslyOpen, ApduResponse* inFci, uint8_t inAtr[257], uint16_t inAtrLength);

		private:
			/**
			 *  defined as true by the SE reader in case a logical channel was already open with the target SE application
			 */
			bool channelPreviouslyOpen = false;
	
			/**
			 * present if channelPreviouslyOpen is false, contains the FCI response of the channel opening
			 */
			ApduResponse fci;

			/**
			 * contain a group of ApduResponse returned by the selected SE application on the SE reader
			 */
			std::list<ApduResponse> apduResponses;

			/**
			 * atr of SE
			 */
			uint8_t atr[257];

			/**
			 * SE atr length
			 */
			uint16_t atrLength = 0;
		};

/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/

/* Inline functions                                         */

	} // of namespace seproxy
} // of namespace keyple

/************************************************************
 End of SeResponse class header
 ************************************************************/

#endif
