// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef KEYPLE_SEPROXY_SEPROXYSERVICE_H
#define KEYPLE_SEPROXY_SEPROXYSERVICE_H

/************************************************************
 SeProxyService class header
 ************************************************************/

//#include "keyple/seproxy/Pkg_seproxy.h"

#include <list>
#include "ReadersPlugin.hpp"

#include <stdint.h>

namespace keyple {

	namespace seproxy {

		/************************************************************/
		/**
		 * Class SeProxyService to be the entry point of the SE Proxy Service
		 */
		class SeProxyService {
		public:

			/**
			 * 
			 * @return singleton’s instance of SeProxyService 
			 */
			static SeProxyService* getInstance();

			/**
			 * 
			 * @return version 
			 */
			uint16_t getVersion();

			/**
			 * 
			 * @param plugins 
			 */
			void setPlugins(std::list<ReadersPlugin>* inPlugins);

			/**
			 * 
			 * @return the list of interfaced reader’s plugins 
			 */
			std::list<ReadersPlugin>* getPlugins();

		private:

			uint16_t version;

			void* proxyContext = NULL;

			/**
			 * the list of readers’ plugins interfaced with the SE Proxy Service
			 */
			std::list<ReadersPlugin> plugins;

			/**
			 * Constructor
			 */
			SeProxyService();
	
			/**
			 * Destructor
			 */
			~SeProxyService();
		};
		/************************************************************/
		/* External declarations (package visibility)               */
		/************************************************************/

		/* Inline functions                                         */

	} // of namespace seproxy

} // of namespace keyple

/************************************************************
 End of SeProxyService class header
 ************************************************************/

#endif
